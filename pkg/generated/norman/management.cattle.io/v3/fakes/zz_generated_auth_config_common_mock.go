// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"context"
	"sync"
	"time"

	"github.com/rancher/norman/controller"
	"github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v31 "github.com/rancher/rancher/pkg/generated/norman/management.cattle.io/v3"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

var (
	lockAuthConfigCommonListerMockGet  sync.RWMutex
	lockAuthConfigCommonListerMockList sync.RWMutex
)

// Ensure, that AuthConfigCommonListerMock does implement v31.AuthConfigCommonLister.
// If this is not the case, regenerate this file with moq.
var _ v31.AuthConfigCommonLister = &AuthConfigCommonListerMock{}

// AuthConfigCommonListerMock is a mock implementation of v31.AuthConfigCommonLister.
//
//	    func TestSomethingThatUsesAuthConfigCommonLister(t *testing.T) {
//
//	        // make and configure a mocked v31.AuthConfigCommonLister
//	        mockedAuthConfigCommonLister := &AuthConfigCommonListerMock{
//	            GetFunc: func(namespace string, name string) (*v3.AuthConfigCommon, error) {
//		               panic("mock out the Get method")
//	            },
//	            ListFunc: func(namespace string, selector labels.Selector) ([]*v3.AuthConfigCommon, error) {
//		               panic("mock out the List method")
//	            },
//	        }
//
//	        // use mockedAuthConfigCommonLister in code that requires v31.AuthConfigCommonLister
//	        // and then make assertions.
//
//	    }
type AuthConfigCommonListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.AuthConfigCommon, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.AuthConfigCommon, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *AuthConfigCommonListerMock) Get(namespace string, name string) (*v3.AuthConfigCommon, error) {
	if mock.GetFunc == nil {
		panic("AuthConfigCommonListerMock.GetFunc: method is nil but AuthConfigCommonLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthConfigCommonListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthConfigCommonListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAuthConfigCommonLister.GetCalls())
func (mock *AuthConfigCommonListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthConfigCommonListerMockGet.RLock()
	calls = mock.calls.Get
	lockAuthConfigCommonListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthConfigCommonListerMock) List(namespace string, selector labels.Selector) ([]*v3.AuthConfigCommon, error) {
	if mock.ListFunc == nil {
		panic("AuthConfigCommonListerMock.ListFunc: method is nil but AuthConfigCommonLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockAuthConfigCommonListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthConfigCommonListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedAuthConfigCommonLister.ListCalls())
func (mock *AuthConfigCommonListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockAuthConfigCommonListerMockList.RLock()
	calls = mock.calls.List
	lockAuthConfigCommonListerMockList.RUnlock()
	return calls
}

var (
	lockAuthConfigCommonControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockAuthConfigCommonControllerMockAddClusterScopedHandler        sync.RWMutex
	lockAuthConfigCommonControllerMockAddFeatureHandler              sync.RWMutex
	lockAuthConfigCommonControllerMockAddHandler                     sync.RWMutex
	lockAuthConfigCommonControllerMockEnqueue                        sync.RWMutex
	lockAuthConfigCommonControllerMockEnqueueAfter                   sync.RWMutex
	lockAuthConfigCommonControllerMockGeneric                        sync.RWMutex
	lockAuthConfigCommonControllerMockInformer                       sync.RWMutex
	lockAuthConfigCommonControllerMockLister                         sync.RWMutex
)

// Ensure, that AuthConfigCommonControllerMock does implement v31.AuthConfigCommonController.
// If this is not the case, regenerate this file with moq.
var _ v31.AuthConfigCommonController = &AuthConfigCommonControllerMock{}

// AuthConfigCommonControllerMock is a mock implementation of v31.AuthConfigCommonController.
//
//	    func TestSomethingThatUsesAuthConfigCommonController(t *testing.T) {
//
//	        // make and configure a mocked v31.AuthConfigCommonController
//	        mockedAuthConfigCommonController := &AuthConfigCommonControllerMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, handler v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            EnqueueFunc: func(namespace string, name string)  {
//		               panic("mock out the Enqueue method")
//	            },
//	            EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
//		               panic("mock out the EnqueueAfter method")
//	            },
//	            GenericFunc: func() controller.GenericController {
//		               panic("mock out the Generic method")
//	            },
//	            InformerFunc: func() cache.SharedIndexInformer {
//		               panic("mock out the Informer method")
//	            },
//	            ListerFunc: func() v31.AuthConfigCommonLister {
//		               panic("mock out the Lister method")
//	            },
//	        }
//
//	        // use mockedAuthConfigCommonController in code that requires v31.AuthConfigCommonController
//	        // and then make assertions.
//
//	    }
type AuthConfigCommonControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v31.AuthConfigCommonHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v31.AuthConfigCommonLister

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.AuthConfigCommonHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.AuthConfigCommonHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.AuthConfigCommonHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v31.AuthConfigCommonHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *AuthConfigCommonControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("AuthConfigCommonControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but AuthConfigCommonController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockAuthConfigCommonControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockAuthConfigCommonControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.AddClusterScopedFeatureHandlerCalls())
func (mock *AuthConfigCommonControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockAuthConfigCommonControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthConfigCommonControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v31.AuthConfigCommonHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthConfigCommonControllerMock.AddClusterScopedHandlerFunc: method is nil but AuthConfigCommonController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockAuthConfigCommonControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthConfigCommonControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.AddClusterScopedHandlerCalls())
func (mock *AuthConfigCommonControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthConfigCommonControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthConfigCommonControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthConfigCommonControllerMock.AddFeatureHandlerFunc: method is nil but AuthConfigCommonController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockAuthConfigCommonControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthConfigCommonControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.AddFeatureHandlerCalls())
func (mock *AuthConfigCommonControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthConfigCommonControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthConfigCommonControllerMock) AddHandler(ctx context.Context, name string, handler v31.AuthConfigCommonHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthConfigCommonControllerMock.AddHandlerFunc: method is nil but AuthConfigCommonController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockAuthConfigCommonControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthConfigCommonControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.AddHandlerCalls())
func (mock *AuthConfigCommonControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthConfigCommonControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *AuthConfigCommonControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("AuthConfigCommonControllerMock.EnqueueFunc: method is nil but AuthConfigCommonController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthConfigCommonControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockAuthConfigCommonControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.EnqueueCalls())
func (mock *AuthConfigCommonControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthConfigCommonControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockAuthConfigCommonControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *AuthConfigCommonControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("AuthConfigCommonControllerMock.EnqueueAfterFunc: method is nil but AuthConfigCommonController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockAuthConfigCommonControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockAuthConfigCommonControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.EnqueueAfterCalls())
func (mock *AuthConfigCommonControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockAuthConfigCommonControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockAuthConfigCommonControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *AuthConfigCommonControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("AuthConfigCommonControllerMock.GenericFunc: method is nil but AuthConfigCommonController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockAuthConfigCommonControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockAuthConfigCommonControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.GenericCalls())
func (mock *AuthConfigCommonControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthConfigCommonControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockAuthConfigCommonControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *AuthConfigCommonControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("AuthConfigCommonControllerMock.InformerFunc: method is nil but AuthConfigCommonController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockAuthConfigCommonControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockAuthConfigCommonControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.InformerCalls())
func (mock *AuthConfigCommonControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthConfigCommonControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockAuthConfigCommonControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *AuthConfigCommonControllerMock) Lister() v31.AuthConfigCommonLister {
	if mock.ListerFunc == nil {
		panic("AuthConfigCommonControllerMock.ListerFunc: method is nil but AuthConfigCommonController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockAuthConfigCommonControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockAuthConfigCommonControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//
//	len(mockedAuthConfigCommonController.ListerCalls())
func (mock *AuthConfigCommonControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthConfigCommonControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockAuthConfigCommonControllerMockLister.RUnlock()
	return calls
}

var (
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddFeatureHandler                sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddHandler                       sync.RWMutex
	lockAuthConfigCommonInterfaceMockAddLifecycle                     sync.RWMutex
	lockAuthConfigCommonInterfaceMockController                       sync.RWMutex
	lockAuthConfigCommonInterfaceMockCreate                           sync.RWMutex
	lockAuthConfigCommonInterfaceMockDelete                           sync.RWMutex
	lockAuthConfigCommonInterfaceMockDeleteCollection                 sync.RWMutex
	lockAuthConfigCommonInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockAuthConfigCommonInterfaceMockGet                              sync.RWMutex
	lockAuthConfigCommonInterfaceMockGetNamespaced                    sync.RWMutex
	lockAuthConfigCommonInterfaceMockList                             sync.RWMutex
	lockAuthConfigCommonInterfaceMockListNamespaced                   sync.RWMutex
	lockAuthConfigCommonInterfaceMockObjectClient                     sync.RWMutex
	lockAuthConfigCommonInterfaceMockUpdate                           sync.RWMutex
	lockAuthConfigCommonInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that AuthConfigCommonInterfaceMock does implement v31.AuthConfigCommonInterface.
// If this is not the case, regenerate this file with moq.
var _ v31.AuthConfigCommonInterface = &AuthConfigCommonInterfaceMock{}

// AuthConfigCommonInterfaceMock is a mock implementation of v31.AuthConfigCommonInterface.
//
//	    func TestSomethingThatUsesAuthConfigCommonInterface(t *testing.T) {
//
//	        // make and configure a mocked v31.AuthConfigCommonInterface
//	        mockedAuthConfigCommonInterface := &AuthConfigCommonInterfaceMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle)  {
//		               panic("mock out the AddClusterScopedFeatureLifecycle method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle)  {
//		               panic("mock out the AddClusterScopedLifecycle method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v31.AuthConfigCommonLifecycle)  {
//		               panic("mock out the AddFeatureLifecycle method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v31.AuthConfigCommonLifecycle)  {
//		               panic("mock out the AddLifecycle method")
//	            },
//	            ControllerFunc: func() v31.AuthConfigCommonController {
//		               panic("mock out the Controller method")
//	            },
//	            CreateFunc: func(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error) {
//		               panic("mock out the Create method")
//	            },
//	            DeleteFunc: func(name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the Delete method")
//	            },
//	            DeleteCollectionFunc: func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
//		               panic("mock out the DeleteCollection method")
//	            },
//	            DeleteNamespacedFunc: func(namespace string, name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the DeleteNamespaced method")
//	            },
//	            GetFunc: func(name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error) {
//		               panic("mock out the Get method")
//	            },
//	            GetNamespacedFunc: func(namespace string, name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error) {
//		               panic("mock out the GetNamespaced method")
//	            },
//	            ListFunc: func(opts metav1.ListOptions) (*v3.AuthConfigCommonList, error) {
//		               panic("mock out the List method")
//	            },
//	            ListNamespacedFunc: func(namespace string, opts metav1.ListOptions) (*v3.AuthConfigCommonList, error) {
//		               panic("mock out the ListNamespaced method")
//	            },
//	            ObjectClientFunc: func() *objectclient.ObjectClient {
//		               panic("mock out the ObjectClient method")
//	            },
//	            UpdateFunc: func(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error) {
//		               panic("mock out the Update method")
//	            },
//	            WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
//		               panic("mock out the Watch method")
//	            },
//	        }
//
//	        // use mockedAuthConfigCommonInterface in code that requires v31.AuthConfigCommonInterface
//	        // and then make assertions.
//
//	    }
type AuthConfigCommonInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v31.AuthConfigCommonLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v31.AuthConfigCommonLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v31.AuthConfigCommonController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *metav1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error)

	// ListFunc mocks the List method.
	ListFunc func(opts metav1.ListOptions) (*v3.AuthConfigCommonList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts metav1.ListOptions) (*v3.AuthConfigCommonList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.AuthConfigCommonHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.AuthConfigCommonLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.AuthConfigCommonHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.AuthConfigCommonLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.AuthConfigCommonHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.AuthConfigCommonLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.AuthConfigCommonHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.AuthConfigCommonLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.AuthConfigCommon
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.AuthConfigCommon
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but AuthConfigCommonInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, syncMoqParam)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but AuthConfigCommonInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.AuthConfigCommonLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v31.AuthConfigCommonLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.AuthConfigCommonLifecycle
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockAuthConfigCommonInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, syncMoqParam v31.AuthConfigCommonHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddClusterScopedHandlerFunc: method is nil but AuthConfigCommonInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthConfigCommonInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, syncMoqParam)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddClusterScopedHandlerCalls())
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthConfigCommonInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v31.AuthConfigCommonLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but AuthConfigCommonInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.AuthConfigCommonLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockAuthConfigCommonInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddClusterScopedLifecycleCalls())
func (mock *AuthConfigCommonInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v31.AuthConfigCommonLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.AuthConfigCommonLifecycle
	}
	lockAuthConfigCommonInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockAuthConfigCommonInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthConfigCommonInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddFeatureHandlerFunc: method is nil but AuthConfigCommonInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockAuthConfigCommonInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthConfigCommonInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddFeatureHandlerCalls())
func (mock *AuthConfigCommonInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthConfigCommonInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *AuthConfigCommonInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v31.AuthConfigCommonLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddFeatureLifecycleFunc: method is nil but AuthConfigCommonInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.AuthConfigCommonLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthConfigCommonInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockAuthConfigCommonInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddFeatureLifecycleCalls())
func (mock *AuthConfigCommonInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v31.AuthConfigCommonLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.AuthConfigCommonLifecycle
	}
	lockAuthConfigCommonInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockAuthConfigCommonInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthConfigCommonInterfaceMock) AddHandler(ctx context.Context, name string, syncMoqParam v31.AuthConfigCommonHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddHandlerFunc: method is nil but AuthConfigCommonInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v31.AuthConfigCommonHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: syncMoqParam,
	}
	lockAuthConfigCommonInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthConfigCommonInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, syncMoqParam)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddHandlerCalls())
func (mock *AuthConfigCommonInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v31.AuthConfigCommonHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v31.AuthConfigCommonHandlerFunc
	}
	lockAuthConfigCommonInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthConfigCommonInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *AuthConfigCommonInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v31.AuthConfigCommonLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("AuthConfigCommonInterfaceMock.AddLifecycleFunc: method is nil but AuthConfigCommonInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.AuthConfigCommonLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthConfigCommonInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockAuthConfigCommonInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.AddLifecycleCalls())
func (mock *AuthConfigCommonInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v31.AuthConfigCommonLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.AuthConfigCommonLifecycle
	}
	lockAuthConfigCommonInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockAuthConfigCommonInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *AuthConfigCommonInterfaceMock) Controller() v31.AuthConfigCommonController {
	if mock.ControllerFunc == nil {
		panic("AuthConfigCommonInterfaceMock.ControllerFunc: method is nil but AuthConfigCommonInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockAuthConfigCommonInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockAuthConfigCommonInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.ControllerCalls())
func (mock *AuthConfigCommonInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthConfigCommonInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockAuthConfigCommonInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *AuthConfigCommonInterfaceMock) Create(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error) {
	if mock.CreateFunc == nil {
		panic("AuthConfigCommonInterfaceMock.CreateFunc: method is nil but AuthConfigCommonInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.AuthConfigCommon
	}{
		In1: in1,
	}
	lockAuthConfigCommonInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockAuthConfigCommonInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.CreateCalls())
func (mock *AuthConfigCommonInterfaceMock) CreateCalls() []struct {
	In1 *v3.AuthConfigCommon
} {
	var calls []struct {
		In1 *v3.AuthConfigCommon
	}
	lockAuthConfigCommonInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockAuthConfigCommonInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AuthConfigCommonInterfaceMock) Delete(name string, options *metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("AuthConfigCommonInterfaceMock.DeleteFunc: method is nil but AuthConfigCommonInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *metav1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockAuthConfigCommonInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockAuthConfigCommonInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.DeleteCalls())
func (mock *AuthConfigCommonInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *metav1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *metav1.DeleteOptions
	}
	lockAuthConfigCommonInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockAuthConfigCommonInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *AuthConfigCommonInterfaceMock) DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("AuthConfigCommonInterfaceMock.DeleteCollectionFunc: method is nil but AuthConfigCommonInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockAuthConfigCommonInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockAuthConfigCommonInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.DeleteCollectionCalls())
func (mock *AuthConfigCommonInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *metav1.DeleteOptions
	ListOpts   metav1.ListOptions
} {
	var calls []struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}
	lockAuthConfigCommonInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockAuthConfigCommonInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *AuthConfigCommonInterfaceMock) DeleteNamespaced(namespace string, name string, options *metav1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("AuthConfigCommonInterfaceMock.DeleteNamespacedFunc: method is nil but AuthConfigCommonInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockAuthConfigCommonInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockAuthConfigCommonInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.DeleteNamespacedCalls())
func (mock *AuthConfigCommonInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *metav1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}
	lockAuthConfigCommonInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockAuthConfigCommonInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AuthConfigCommonInterfaceMock) Get(name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error) {
	if mock.GetFunc == nil {
		panic("AuthConfigCommonInterfaceMock.GetFunc: method is nil but AuthConfigCommonInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts metav1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockAuthConfigCommonInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthConfigCommonInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.GetCalls())
func (mock *AuthConfigCommonInterfaceMock) GetCalls() []struct {
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Name string
		Opts metav1.GetOptions
	}
	lockAuthConfigCommonInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockAuthConfigCommonInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *AuthConfigCommonInterfaceMock) GetNamespaced(namespace string, name string, opts metav1.GetOptions) (*v3.AuthConfigCommon, error) {
	if mock.GetNamespacedFunc == nil {
		panic("AuthConfigCommonInterfaceMock.GetNamespacedFunc: method is nil but AuthConfigCommonInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockAuthConfigCommonInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockAuthConfigCommonInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.GetNamespacedCalls())
func (mock *AuthConfigCommonInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      metav1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}
	lockAuthConfigCommonInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockAuthConfigCommonInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthConfigCommonInterfaceMock) List(opts metav1.ListOptions) (*v3.AuthConfigCommonList, error) {
	if mock.ListFunc == nil {
		panic("AuthConfigCommonInterfaceMock.ListFunc: method is nil but AuthConfigCommonInterface.List was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthConfigCommonInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthConfigCommonInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.ListCalls())
func (mock *AuthConfigCommonInterfaceMock) ListCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockAuthConfigCommonInterfaceMockList.RLock()
	calls = mock.calls.List
	lockAuthConfigCommonInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *AuthConfigCommonInterfaceMock) ListNamespaced(namespace string, opts metav1.ListOptions) (*v3.AuthConfigCommonList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("AuthConfigCommonInterfaceMock.ListNamespacedFunc: method is nil but AuthConfigCommonInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      metav1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockAuthConfigCommonInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockAuthConfigCommonInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.ListNamespacedCalls())
func (mock *AuthConfigCommonInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      metav1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      metav1.ListOptions
	}
	lockAuthConfigCommonInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockAuthConfigCommonInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *AuthConfigCommonInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("AuthConfigCommonInterfaceMock.ObjectClientFunc: method is nil but AuthConfigCommonInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockAuthConfigCommonInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockAuthConfigCommonInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.ObjectClientCalls())
func (mock *AuthConfigCommonInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthConfigCommonInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockAuthConfigCommonInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AuthConfigCommonInterfaceMock) Update(in1 *v3.AuthConfigCommon) (*v3.AuthConfigCommon, error) {
	if mock.UpdateFunc == nil {
		panic("AuthConfigCommonInterfaceMock.UpdateFunc: method is nil but AuthConfigCommonInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.AuthConfigCommon
	}{
		In1: in1,
	}
	lockAuthConfigCommonInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockAuthConfigCommonInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.UpdateCalls())
func (mock *AuthConfigCommonInterfaceMock) UpdateCalls() []struct {
	In1 *v3.AuthConfigCommon
} {
	var calls []struct {
		In1 *v3.AuthConfigCommon
	}
	lockAuthConfigCommonInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockAuthConfigCommonInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *AuthConfigCommonInterfaceMock) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("AuthConfigCommonInterfaceMock.WatchFunc: method is nil but AuthConfigCommonInterface.Watch was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthConfigCommonInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockAuthConfigCommonInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedAuthConfigCommonInterface.WatchCalls())
func (mock *AuthConfigCommonInterfaceMock) WatchCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockAuthConfigCommonInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockAuthConfigCommonInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockAuthConfigCommonsGetterMockAuthConfigCommons sync.RWMutex
)

// Ensure, that AuthConfigCommonsGetterMock does implement v31.AuthConfigCommonsGetter.
// If this is not the case, regenerate this file with moq.
var _ v31.AuthConfigCommonsGetter = &AuthConfigCommonsGetterMock{}

// AuthConfigCommonsGetterMock is a mock implementation of v31.AuthConfigCommonsGetter.
//
//	    func TestSomethingThatUsesAuthConfigCommonsGetter(t *testing.T) {
//
//	        // make and configure a mocked v31.AuthConfigCommonsGetter
//	        mockedAuthConfigCommonsGetter := &AuthConfigCommonsGetterMock{
//	            AuthConfigCommonsFunc: func(namespace string) v31.AuthConfigCommonInterface {
//		               panic("mock out the AuthConfigCommons method")
//	            },
//	        }
//
//	        // use mockedAuthConfigCommonsGetter in code that requires v31.AuthConfigCommonsGetter
//	        // and then make assertions.
//
//	    }
type AuthConfigCommonsGetterMock struct {
	// AuthConfigCommonsFunc mocks the AuthConfigCommons method.
	AuthConfigCommonsFunc func(namespace string) v31.AuthConfigCommonInterface

	// calls tracks calls to the methods.
	calls struct {
		// AuthConfigCommons holds details about calls to the AuthConfigCommons method.
		AuthConfigCommons []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// AuthConfigCommons calls AuthConfigCommonsFunc.
func (mock *AuthConfigCommonsGetterMock) AuthConfigCommons(namespace string) v31.AuthConfigCommonInterface {
	if mock.AuthConfigCommonsFunc == nil {
		panic("AuthConfigCommonsGetterMock.AuthConfigCommonsFunc: method is nil but AuthConfigCommonsGetter.AuthConfigCommons was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockAuthConfigCommonsGetterMockAuthConfigCommons.Lock()
	mock.calls.AuthConfigCommons = append(mock.calls.AuthConfigCommons, callInfo)
	lockAuthConfigCommonsGetterMockAuthConfigCommons.Unlock()
	return mock.AuthConfigCommonsFunc(namespace)
}

// AuthConfigCommonsCalls gets all the calls that were made to AuthConfigCommons.
// Check the length with:
//
//	len(mockedAuthConfigCommonsGetter.AuthConfigCommonsCalls())
func (mock *AuthConfigCommonsGetterMock) AuthConfigCommonsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockAuthConfigCommonsGetterMockAuthConfigCommons.RLock()
	calls = mock.calls.AuthConfigCommons
	lockAuthConfigCommonsGetterMockAuthConfigCommons.RUnlock()
	return calls
}
