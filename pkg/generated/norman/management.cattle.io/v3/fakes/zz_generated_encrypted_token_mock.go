// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"context"
	"sync"
	"time"

	"github.com/rancher/norman/controller"
	"github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	v31 "github.com/rancher/rancher/pkg/generated/norman/management.cattle.io/v3"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

var (
	lockEncryptedTokenListerMockGet  sync.RWMutex
	lockEncryptedTokenListerMockList sync.RWMutex
)

// Ensure, that EncryptedTokenListerMock does implement v31.EncryptedTokenLister.
// If this is not the case, regenerate this file with moq.
var _ v31.EncryptedTokenLister = &EncryptedTokenListerMock{}

// EncryptedTokenListerMock is a mock implementation of v31.EncryptedTokenLister.
//
//	    func TestSomethingThatUsesEncryptedTokenLister(t *testing.T) {
//
//	        // make and configure a mocked v31.EncryptedTokenLister
//	        mockedEncryptedTokenLister := &EncryptedTokenListerMock{
//	            GetFunc: func(namespace string, name string) (*v3.EncryptedToken, error) {
//		               panic("mock out the Get method")
//	            },
//	            ListFunc: func(namespace string, selector labels.Selector) ([]*v3.EncryptedToken, error) {
//		               panic("mock out the List method")
//	            },
//	        }
//
//	        // use mockedEncryptedTokenLister in code that requires v31.EncryptedTokenLister
//	        // and then make assertions.
//
//	    }
type EncryptedTokenListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.EncryptedToken, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.EncryptedToken, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *EncryptedTokenListerMock) Get(namespace string, name string) (*v3.EncryptedToken, error) {
	if mock.GetFunc == nil {
		panic("EncryptedTokenListerMock.GetFunc: method is nil but EncryptedTokenLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockEncryptedTokenListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockEncryptedTokenListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedEncryptedTokenLister.GetCalls())
func (mock *EncryptedTokenListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockEncryptedTokenListerMockGet.RLock()
	calls = mock.calls.Get
	lockEncryptedTokenListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *EncryptedTokenListerMock) List(namespace string, selector labels.Selector) ([]*v3.EncryptedToken, error) {
	if mock.ListFunc == nil {
		panic("EncryptedTokenListerMock.ListFunc: method is nil but EncryptedTokenLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockEncryptedTokenListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockEncryptedTokenListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedEncryptedTokenLister.ListCalls())
func (mock *EncryptedTokenListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockEncryptedTokenListerMockList.RLock()
	calls = mock.calls.List
	lockEncryptedTokenListerMockList.RUnlock()
	return calls
}

var (
	lockEncryptedTokenControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockEncryptedTokenControllerMockAddClusterScopedHandler        sync.RWMutex
	lockEncryptedTokenControllerMockAddFeatureHandler              sync.RWMutex
	lockEncryptedTokenControllerMockAddHandler                     sync.RWMutex
	lockEncryptedTokenControllerMockEnqueue                        sync.RWMutex
	lockEncryptedTokenControllerMockEnqueueAfter                   sync.RWMutex
	lockEncryptedTokenControllerMockGeneric                        sync.RWMutex
	lockEncryptedTokenControllerMockInformer                       sync.RWMutex
	lockEncryptedTokenControllerMockLister                         sync.RWMutex
)

// Ensure, that EncryptedTokenControllerMock does implement v31.EncryptedTokenController.
// If this is not the case, regenerate this file with moq.
var _ v31.EncryptedTokenController = &EncryptedTokenControllerMock{}

// EncryptedTokenControllerMock is a mock implementation of v31.EncryptedTokenController.
//
//	    func TestSomethingThatUsesEncryptedTokenController(t *testing.T) {
//
//	        // make and configure a mocked v31.EncryptedTokenController
//	        mockedEncryptedTokenController := &EncryptedTokenControllerMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, handler v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            EnqueueFunc: func(namespace string, name string)  {
//		               panic("mock out the Enqueue method")
//	            },
//	            EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
//		               panic("mock out the EnqueueAfter method")
//	            },
//	            GenericFunc: func() controller.GenericController {
//		               panic("mock out the Generic method")
//	            },
//	            InformerFunc: func() cache.SharedIndexInformer {
//		               panic("mock out the Informer method")
//	            },
//	            ListerFunc: func() v31.EncryptedTokenLister {
//		               panic("mock out the Lister method")
//	            },
//	        }
//
//	        // use mockedEncryptedTokenController in code that requires v31.EncryptedTokenController
//	        // and then make assertions.
//
//	    }
type EncryptedTokenControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v31.EncryptedTokenHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v31.EncryptedTokenLister

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.EncryptedTokenHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.EncryptedTokenHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.EncryptedTokenHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v31.EncryptedTokenHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *EncryptedTokenControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("EncryptedTokenControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but EncryptedTokenController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.EncryptedTokenHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockEncryptedTokenControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockEncryptedTokenControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenController.AddClusterScopedFeatureHandlerCalls())
func (mock *EncryptedTokenControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockEncryptedTokenControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *EncryptedTokenControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v31.EncryptedTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("EncryptedTokenControllerMock.AddClusterScopedHandlerFunc: method is nil but EncryptedTokenController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.EncryptedTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockEncryptedTokenControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockEncryptedTokenControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenController.AddClusterScopedHandlerCalls())
func (mock *EncryptedTokenControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockEncryptedTokenControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *EncryptedTokenControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("EncryptedTokenControllerMock.AddFeatureHandlerFunc: method is nil but EncryptedTokenController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.EncryptedTokenHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockEncryptedTokenControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockEncryptedTokenControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenController.AddFeatureHandlerCalls())
func (mock *EncryptedTokenControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockEncryptedTokenControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *EncryptedTokenControllerMock) AddHandler(ctx context.Context, name string, handler v31.EncryptedTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("EncryptedTokenControllerMock.AddHandlerFunc: method is nil but EncryptedTokenController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v31.EncryptedTokenHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockEncryptedTokenControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockEncryptedTokenControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenController.AddHandlerCalls())
func (mock *EncryptedTokenControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockEncryptedTokenControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *EncryptedTokenControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("EncryptedTokenControllerMock.EnqueueFunc: method is nil but EncryptedTokenController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockEncryptedTokenControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockEncryptedTokenControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//
//	len(mockedEncryptedTokenController.EnqueueCalls())
func (mock *EncryptedTokenControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockEncryptedTokenControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockEncryptedTokenControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *EncryptedTokenControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("EncryptedTokenControllerMock.EnqueueAfterFunc: method is nil but EncryptedTokenController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockEncryptedTokenControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockEncryptedTokenControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//
//	len(mockedEncryptedTokenController.EnqueueAfterCalls())
func (mock *EncryptedTokenControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockEncryptedTokenControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockEncryptedTokenControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *EncryptedTokenControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("EncryptedTokenControllerMock.GenericFunc: method is nil but EncryptedTokenController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockEncryptedTokenControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockEncryptedTokenControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//
//	len(mockedEncryptedTokenController.GenericCalls())
func (mock *EncryptedTokenControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockEncryptedTokenControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockEncryptedTokenControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *EncryptedTokenControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("EncryptedTokenControllerMock.InformerFunc: method is nil but EncryptedTokenController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockEncryptedTokenControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockEncryptedTokenControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//
//	len(mockedEncryptedTokenController.InformerCalls())
func (mock *EncryptedTokenControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockEncryptedTokenControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockEncryptedTokenControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *EncryptedTokenControllerMock) Lister() v31.EncryptedTokenLister {
	if mock.ListerFunc == nil {
		panic("EncryptedTokenControllerMock.ListerFunc: method is nil but EncryptedTokenController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockEncryptedTokenControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockEncryptedTokenControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//
//	len(mockedEncryptedTokenController.ListerCalls())
func (mock *EncryptedTokenControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockEncryptedTokenControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockEncryptedTokenControllerMockLister.RUnlock()
	return calls
}

var (
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockEncryptedTokenInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockEncryptedTokenInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockEncryptedTokenInterfaceMockAddFeatureHandler                sync.RWMutex
	lockEncryptedTokenInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockEncryptedTokenInterfaceMockAddHandler                       sync.RWMutex
	lockEncryptedTokenInterfaceMockAddLifecycle                     sync.RWMutex
	lockEncryptedTokenInterfaceMockController                       sync.RWMutex
	lockEncryptedTokenInterfaceMockCreate                           sync.RWMutex
	lockEncryptedTokenInterfaceMockDelete                           sync.RWMutex
	lockEncryptedTokenInterfaceMockDeleteCollection                 sync.RWMutex
	lockEncryptedTokenInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockEncryptedTokenInterfaceMockGet                              sync.RWMutex
	lockEncryptedTokenInterfaceMockGetNamespaced                    sync.RWMutex
	lockEncryptedTokenInterfaceMockList                             sync.RWMutex
	lockEncryptedTokenInterfaceMockListNamespaced                   sync.RWMutex
	lockEncryptedTokenInterfaceMockObjectClient                     sync.RWMutex
	lockEncryptedTokenInterfaceMockUpdate                           sync.RWMutex
	lockEncryptedTokenInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that EncryptedTokenInterfaceMock does implement v31.EncryptedTokenInterface.
// If this is not the case, regenerate this file with moq.
var _ v31.EncryptedTokenInterface = &EncryptedTokenInterfaceMock{}

// EncryptedTokenInterfaceMock is a mock implementation of v31.EncryptedTokenInterface.
//
//	    func TestSomethingThatUsesEncryptedTokenInterface(t *testing.T) {
//
//	        // make and configure a mocked v31.EncryptedTokenInterface
//	        mockedEncryptedTokenInterface := &EncryptedTokenInterfaceMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle)  {
//		               panic("mock out the AddClusterScopedFeatureLifecycle method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle)  {
//		               panic("mock out the AddClusterScopedLifecycle method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v31.EncryptedTokenLifecycle)  {
//		               panic("mock out the AddFeatureLifecycle method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v31.EncryptedTokenLifecycle)  {
//		               panic("mock out the AddLifecycle method")
//	            },
//	            ControllerFunc: func() v31.EncryptedTokenController {
//		               panic("mock out the Controller method")
//	            },
//	            CreateFunc: func(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error) {
//		               panic("mock out the Create method")
//	            },
//	            DeleteFunc: func(name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the Delete method")
//	            },
//	            DeleteCollectionFunc: func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
//		               panic("mock out the DeleteCollection method")
//	            },
//	            DeleteNamespacedFunc: func(namespace string, name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the DeleteNamespaced method")
//	            },
//	            GetFunc: func(name string, opts metav1.GetOptions) (*v3.EncryptedToken, error) {
//		               panic("mock out the Get method")
//	            },
//	            GetNamespacedFunc: func(namespace string, name string, opts metav1.GetOptions) (*v3.EncryptedToken, error) {
//		               panic("mock out the GetNamespaced method")
//	            },
//	            ListFunc: func(opts metav1.ListOptions) (*v3.EncryptedTokenList, error) {
//		               panic("mock out the List method")
//	            },
//	            ListNamespacedFunc: func(namespace string, opts metav1.ListOptions) (*v3.EncryptedTokenList, error) {
//		               panic("mock out the ListNamespaced method")
//	            },
//	            ObjectClientFunc: func() *objectclient.ObjectClient {
//		               panic("mock out the ObjectClient method")
//	            },
//	            UpdateFunc: func(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error) {
//		               panic("mock out the Update method")
//	            },
//	            WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
//		               panic("mock out the Watch method")
//	            },
//	        }
//
//	        // use mockedEncryptedTokenInterface in code that requires v31.EncryptedTokenInterface
//	        // and then make assertions.
//
//	    }
type EncryptedTokenInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v31.EncryptedTokenLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, syncMoqParam v31.EncryptedTokenHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v31.EncryptedTokenLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v31.EncryptedTokenController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *metav1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts metav1.GetOptions) (*v3.EncryptedToken, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts metav1.GetOptions) (*v3.EncryptedToken, error)

	// ListFunc mocks the List method.
	ListFunc func(opts metav1.ListOptions) (*v3.EncryptedTokenList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts metav1.ListOptions) (*v3.EncryptedTokenList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.EncryptedTokenHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.EncryptedTokenLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.EncryptedTokenHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.EncryptedTokenLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.EncryptedTokenHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.EncryptedTokenLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.EncryptedTokenHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.EncryptedTokenLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.EncryptedToken
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.EncryptedToken
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but EncryptedTokenInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.EncryptedTokenHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, syncMoqParam)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but EncryptedTokenInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.EncryptedTokenLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v31.EncryptedTokenLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.EncryptedTokenLifecycle
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockEncryptedTokenInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, syncMoqParam v31.EncryptedTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddClusterScopedHandlerFunc: method is nil but EncryptedTokenInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.EncryptedTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockEncryptedTokenInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, syncMoqParam)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddClusterScopedHandlerCalls())
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockEncryptedTokenInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v31.EncryptedTokenLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but EncryptedTokenInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.EncryptedTokenLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockEncryptedTokenInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddClusterScopedLifecycleCalls())
func (mock *EncryptedTokenInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v31.EncryptedTokenLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.EncryptedTokenLifecycle
	}
	lockEncryptedTokenInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockEncryptedTokenInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *EncryptedTokenInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.EncryptedTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddFeatureHandlerFunc: method is nil but EncryptedTokenInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.EncryptedTokenHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockEncryptedTokenInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockEncryptedTokenInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddFeatureHandlerCalls())
func (mock *EncryptedTokenInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockEncryptedTokenInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *EncryptedTokenInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v31.EncryptedTokenLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddFeatureLifecycleFunc: method is nil but EncryptedTokenInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.EncryptedTokenLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockEncryptedTokenInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockEncryptedTokenInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddFeatureLifecycleCalls())
func (mock *EncryptedTokenInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v31.EncryptedTokenLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.EncryptedTokenLifecycle
	}
	lockEncryptedTokenInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockEncryptedTokenInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *EncryptedTokenInterfaceMock) AddHandler(ctx context.Context, name string, syncMoqParam v31.EncryptedTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddHandlerFunc: method is nil but EncryptedTokenInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v31.EncryptedTokenHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: syncMoqParam,
	}
	lockEncryptedTokenInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockEncryptedTokenInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, syncMoqParam)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddHandlerCalls())
func (mock *EncryptedTokenInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v31.EncryptedTokenHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v31.EncryptedTokenHandlerFunc
	}
	lockEncryptedTokenInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockEncryptedTokenInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *EncryptedTokenInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v31.EncryptedTokenLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("EncryptedTokenInterfaceMock.AddLifecycleFunc: method is nil but EncryptedTokenInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.EncryptedTokenLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockEncryptedTokenInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockEncryptedTokenInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.AddLifecycleCalls())
func (mock *EncryptedTokenInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v31.EncryptedTokenLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.EncryptedTokenLifecycle
	}
	lockEncryptedTokenInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockEncryptedTokenInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *EncryptedTokenInterfaceMock) Controller() v31.EncryptedTokenController {
	if mock.ControllerFunc == nil {
		panic("EncryptedTokenInterfaceMock.ControllerFunc: method is nil but EncryptedTokenInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockEncryptedTokenInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockEncryptedTokenInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.ControllerCalls())
func (mock *EncryptedTokenInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockEncryptedTokenInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockEncryptedTokenInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *EncryptedTokenInterfaceMock) Create(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error) {
	if mock.CreateFunc == nil {
		panic("EncryptedTokenInterfaceMock.CreateFunc: method is nil but EncryptedTokenInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.EncryptedToken
	}{
		In1: in1,
	}
	lockEncryptedTokenInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockEncryptedTokenInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.CreateCalls())
func (mock *EncryptedTokenInterfaceMock) CreateCalls() []struct {
	In1 *v3.EncryptedToken
} {
	var calls []struct {
		In1 *v3.EncryptedToken
	}
	lockEncryptedTokenInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockEncryptedTokenInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *EncryptedTokenInterfaceMock) Delete(name string, options *metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("EncryptedTokenInterfaceMock.DeleteFunc: method is nil but EncryptedTokenInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *metav1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockEncryptedTokenInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockEncryptedTokenInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.DeleteCalls())
func (mock *EncryptedTokenInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *metav1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *metav1.DeleteOptions
	}
	lockEncryptedTokenInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockEncryptedTokenInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *EncryptedTokenInterfaceMock) DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("EncryptedTokenInterfaceMock.DeleteCollectionFunc: method is nil but EncryptedTokenInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockEncryptedTokenInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockEncryptedTokenInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.DeleteCollectionCalls())
func (mock *EncryptedTokenInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *metav1.DeleteOptions
	ListOpts   metav1.ListOptions
} {
	var calls []struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}
	lockEncryptedTokenInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockEncryptedTokenInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *EncryptedTokenInterfaceMock) DeleteNamespaced(namespace string, name string, options *metav1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("EncryptedTokenInterfaceMock.DeleteNamespacedFunc: method is nil but EncryptedTokenInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockEncryptedTokenInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockEncryptedTokenInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.DeleteNamespacedCalls())
func (mock *EncryptedTokenInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *metav1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}
	lockEncryptedTokenInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockEncryptedTokenInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *EncryptedTokenInterfaceMock) Get(name string, opts metav1.GetOptions) (*v3.EncryptedToken, error) {
	if mock.GetFunc == nil {
		panic("EncryptedTokenInterfaceMock.GetFunc: method is nil but EncryptedTokenInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts metav1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockEncryptedTokenInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockEncryptedTokenInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.GetCalls())
func (mock *EncryptedTokenInterfaceMock) GetCalls() []struct {
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Name string
		Opts metav1.GetOptions
	}
	lockEncryptedTokenInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockEncryptedTokenInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *EncryptedTokenInterfaceMock) GetNamespaced(namespace string, name string, opts metav1.GetOptions) (*v3.EncryptedToken, error) {
	if mock.GetNamespacedFunc == nil {
		panic("EncryptedTokenInterfaceMock.GetNamespacedFunc: method is nil but EncryptedTokenInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockEncryptedTokenInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockEncryptedTokenInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.GetNamespacedCalls())
func (mock *EncryptedTokenInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      metav1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}
	lockEncryptedTokenInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockEncryptedTokenInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *EncryptedTokenInterfaceMock) List(opts metav1.ListOptions) (*v3.EncryptedTokenList, error) {
	if mock.ListFunc == nil {
		panic("EncryptedTokenInterfaceMock.ListFunc: method is nil but EncryptedTokenInterface.List was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockEncryptedTokenInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockEncryptedTokenInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.ListCalls())
func (mock *EncryptedTokenInterfaceMock) ListCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockEncryptedTokenInterfaceMockList.RLock()
	calls = mock.calls.List
	lockEncryptedTokenInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *EncryptedTokenInterfaceMock) ListNamespaced(namespace string, opts metav1.ListOptions) (*v3.EncryptedTokenList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("EncryptedTokenInterfaceMock.ListNamespacedFunc: method is nil but EncryptedTokenInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      metav1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockEncryptedTokenInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockEncryptedTokenInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.ListNamespacedCalls())
func (mock *EncryptedTokenInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      metav1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      metav1.ListOptions
	}
	lockEncryptedTokenInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockEncryptedTokenInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *EncryptedTokenInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("EncryptedTokenInterfaceMock.ObjectClientFunc: method is nil but EncryptedTokenInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockEncryptedTokenInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockEncryptedTokenInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.ObjectClientCalls())
func (mock *EncryptedTokenInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockEncryptedTokenInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockEncryptedTokenInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *EncryptedTokenInterfaceMock) Update(in1 *v3.EncryptedToken) (*v3.EncryptedToken, error) {
	if mock.UpdateFunc == nil {
		panic("EncryptedTokenInterfaceMock.UpdateFunc: method is nil but EncryptedTokenInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.EncryptedToken
	}{
		In1: in1,
	}
	lockEncryptedTokenInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockEncryptedTokenInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.UpdateCalls())
func (mock *EncryptedTokenInterfaceMock) UpdateCalls() []struct {
	In1 *v3.EncryptedToken
} {
	var calls []struct {
		In1 *v3.EncryptedToken
	}
	lockEncryptedTokenInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockEncryptedTokenInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *EncryptedTokenInterfaceMock) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("EncryptedTokenInterfaceMock.WatchFunc: method is nil but EncryptedTokenInterface.Watch was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockEncryptedTokenInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockEncryptedTokenInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedEncryptedTokenInterface.WatchCalls())
func (mock *EncryptedTokenInterfaceMock) WatchCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockEncryptedTokenInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockEncryptedTokenInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockEncryptedTokensGetterMockEncryptedTokens sync.RWMutex
)

// Ensure, that EncryptedTokensGetterMock does implement v31.EncryptedTokensGetter.
// If this is not the case, regenerate this file with moq.
var _ v31.EncryptedTokensGetter = &EncryptedTokensGetterMock{}

// EncryptedTokensGetterMock is a mock implementation of v31.EncryptedTokensGetter.
//
//	    func TestSomethingThatUsesEncryptedTokensGetter(t *testing.T) {
//
//	        // make and configure a mocked v31.EncryptedTokensGetter
//	        mockedEncryptedTokensGetter := &EncryptedTokensGetterMock{
//	            EncryptedTokensFunc: func(namespace string) v31.EncryptedTokenInterface {
//		               panic("mock out the EncryptedTokens method")
//	            },
//	        }
//
//	        // use mockedEncryptedTokensGetter in code that requires v31.EncryptedTokensGetter
//	        // and then make assertions.
//
//	    }
type EncryptedTokensGetterMock struct {
	// EncryptedTokensFunc mocks the EncryptedTokens method.
	EncryptedTokensFunc func(namespace string) v31.EncryptedTokenInterface

	// calls tracks calls to the methods.
	calls struct {
		// EncryptedTokens holds details about calls to the EncryptedTokens method.
		EncryptedTokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// EncryptedTokens calls EncryptedTokensFunc.
func (mock *EncryptedTokensGetterMock) EncryptedTokens(namespace string) v31.EncryptedTokenInterface {
	if mock.EncryptedTokensFunc == nil {
		panic("EncryptedTokensGetterMock.EncryptedTokensFunc: method is nil but EncryptedTokensGetter.EncryptedTokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockEncryptedTokensGetterMockEncryptedTokens.Lock()
	mock.calls.EncryptedTokens = append(mock.calls.EncryptedTokens, callInfo)
	lockEncryptedTokensGetterMockEncryptedTokens.Unlock()
	return mock.EncryptedTokensFunc(namespace)
}

// EncryptedTokensCalls gets all the calls that were made to EncryptedTokens.
// Check the length with:
//
//	len(mockedEncryptedTokensGetter.EncryptedTokensCalls())
func (mock *EncryptedTokensGetterMock) EncryptedTokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockEncryptedTokensGetterMockEncryptedTokens.RLock()
	calls = mock.calls.EncryptedTokens
	lockEncryptedTokensGetterMockEncryptedTokens.RUnlock()
	return calls
}
